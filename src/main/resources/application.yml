spring:
  application:
    name: urlscanner
  datasource:
    url: jdbc:postgresql://${DB_HOST:db}:${DB_PORT:5432}/${DB_NAME:urlscanner}
    username: ${DB_USER:urlscanner}
    password: ${DB_PASSWORD:password}
    driver-class-name: org.postgresql.Driver
  jpa:
    hibernate:
      ddl-auto: update # Creates/updates the schema on startup
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true

server:
  port: ${SERVER_PORT:8080}

jwt:
  secret: ${JWT_SECRET:default-super-secret-key-that-should-be-changed}
  expiration: ${JWT_EXPIRATION:86400000}

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus # Expose prometheus endpoint
  endpoint:
    health:
      show-details: when_authorized

logging:
  level:
    com.geeknarrator.urlscanner: INFO

# Custom application properties
urlscan:
  api:
    key: ${URLSCAN_API_KEY:}
  cache:
    ttl:
      hours: ${URLSCAN_CACHE_TTL_HOURS:24}
  client:
    max-retries: ${URLSCAN_CLIENT_MAX_RETRIES:3}
    retry-initial-delay-ms: ${URLSCAN_CLIENT_RETRY_DELAY_MS:5000}

worker:
  submission:
    delay-ms: ${WORKER_SUBMISSION_DELAY_MS:10000}
    batch-size: ${WORKER_SUBMISSION_BATCH_SIZE:100}
  result:
    delay-ms: ${WORKER_RESULT_DELAY_MS:15000}
    batch-size: ${WORKER_RESULT_BATCH_SIZE:100}
  fairness:
    per-user-batch-size: ${WORKER_FAIRNESS_PER_USER_BATCH_SIZE:5}
